// This file was generated by gir (3ad22de) from gir-files (0bcaef9+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals)]

extern crate libc;
#[macro_use] extern crate bitflags;
extern crate glib_sys as glib;
extern crate gobject_sys as gobject;
extern crate freetype_sys as freetype2;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType, Volatile};

// Aliases
pub type hb_bool_t = c_int;
pub type hb_codepoint_t = u32;
pub type hb_font_get_font_h_extents_func_t = hb_font_get_font_extents_func_t;
pub type hb_font_get_font_v_extents_func_t = hb_font_get_font_extents_func_t;
pub type hb_font_get_glyph_h_advance_func_t = hb_font_get_glyph_advance_func_t;
pub type hb_font_get_glyph_h_kerning_func_t = hb_font_get_glyph_kerning_func_t;
pub type hb_font_get_glyph_h_origin_func_t = hb_font_get_glyph_origin_func_t;
pub type hb_font_get_glyph_v_advance_func_t = hb_font_get_glyph_advance_func_t;
pub type hb_font_get_glyph_v_kerning_func_t = hb_font_get_glyph_kerning_func_t;
pub type hb_font_get_glyph_v_origin_func_t = hb_font_get_glyph_origin_func_t;
pub type hb_mask_t = u32;
pub type hb_position_t = i32;
pub type hb_tag_t = u32;

// Enums
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_buffer_cluster_level_t {
    MonotoneGraphemes = 0,
    MonotoneCharacters = 1,
    Characters = 2,
}
pub const HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES: hb_buffer_cluster_level_t = hb_buffer_cluster_level_t::MonotoneGraphemes;
pub const HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS: hb_buffer_cluster_level_t = hb_buffer_cluster_level_t::MonotoneCharacters;
pub const HB_BUFFER_CLUSTER_LEVEL_CHARACTERS: hb_buffer_cluster_level_t = hb_buffer_cluster_level_t::Characters;
pub const HB_BUFFER_CLUSTER_LEVEL_DEFAULT: hb_buffer_cluster_level_t = hb_buffer_cluster_level_t::MonotoneGraphemes;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_buffer_content_type_t {
    Invalid = 0,
    Unicode = 1,
    Glyphs = 2,
}
pub const HB_BUFFER_CONTENT_TYPE_INVALID: hb_buffer_content_type_t = hb_buffer_content_type_t::Invalid;
pub const HB_BUFFER_CONTENT_TYPE_UNICODE: hb_buffer_content_type_t = hb_buffer_content_type_t::Unicode;
pub const HB_BUFFER_CONTENT_TYPE_GLYPHS: hb_buffer_content_type_t = hb_buffer_content_type_t::Glyphs;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_buffer_serialize_format_t {
    Text = 1413830740,
    Json = 1246973774,
    Invalid = 0,
}
pub const HB_BUFFER_SERIALIZE_FORMAT_TEXT: hb_buffer_serialize_format_t = hb_buffer_serialize_format_t::Text;
pub const HB_BUFFER_SERIALIZE_FORMAT_JSON: hb_buffer_serialize_format_t = hb_buffer_serialize_format_t::Json;
pub const HB_BUFFER_SERIALIZE_FORMAT_INVALID: hb_buffer_serialize_format_t = hb_buffer_serialize_format_t::Invalid;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_direction_t {
    Invalid = 0,
    Ltr = 4,
    Rtl = 5,
    Ttb = 6,
    Btt = 7,
}
pub const HB_DIRECTION_INVALID: hb_direction_t = hb_direction_t::Invalid;
pub const HB_DIRECTION_LTR: hb_direction_t = hb_direction_t::Ltr;
pub const HB_DIRECTION_RTL: hb_direction_t = hb_direction_t::Rtl;
pub const HB_DIRECTION_TTB: hb_direction_t = hb_direction_t::Ttb;
pub const HB_DIRECTION_BTT: hb_direction_t = hb_direction_t::Btt;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_memory_mode_t {
    Duplicate = 0,
    Readonly = 1,
    Writable = 2,
    ReadonlyMayMakeWritable = 3,
}
pub const HB_MEMORY_MODE_DUPLICATE: hb_memory_mode_t = hb_memory_mode_t::Duplicate;
pub const HB_MEMORY_MODE_READONLY: hb_memory_mode_t = hb_memory_mode_t::Readonly;
pub const HB_MEMORY_MODE_WRITABLE: hb_memory_mode_t = hb_memory_mode_t::Writable;
pub const HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE: hb_memory_mode_t = hb_memory_mode_t::ReadonlyMayMakeWritable;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_ot_layout_glyph_class_t {
    Unclassified = 0,
    BaseGlyph = 1,
    Ligature = 2,
    Mark = 3,
    Component = 4,
}
pub const HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED: hb_ot_layout_glyph_class_t = hb_ot_layout_glyph_class_t::Unclassified;
pub const HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH: hb_ot_layout_glyph_class_t = hb_ot_layout_glyph_class_t::BaseGlyph;
pub const HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE: hb_ot_layout_glyph_class_t = hb_ot_layout_glyph_class_t::Ligature;
pub const HB_OT_LAYOUT_GLYPH_CLASS_MARK: hb_ot_layout_glyph_class_t = hb_ot_layout_glyph_class_t::Mark;
pub const HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT: hb_ot_layout_glyph_class_t = hb_ot_layout_glyph_class_t::Component;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_ot_math_constant_t {
    ScriptPercentScaleDown = 0,
    ScriptScriptPercentScaleDown = 1,
    DelimitedSubFormulaMinHeight = 2,
    DisplayOperatorMinHeight = 3,
    MathLeading = 4,
    AxisHeight = 5,
    AccentBaseHeight = 6,
    FlattenedAccentBaseHeight = 7,
    SubscriptShiftDown = 8,
    SubscriptTopMax = 9,
    SubscriptBaselineDropMin = 10,
    SuperscriptShiftUp = 11,
    SuperscriptShiftUpCramped = 12,
    SuperscriptBottomMin = 13,
    SuperscriptBaselineDropMax = 14,
    SubSuperscriptGapMin = 15,
    SuperscriptBottomMaxWithSubscript = 16,
    SpaceAfterScript = 17,
    UpperLimitGapMin = 18,
    UpperLimitBaselineRiseMin = 19,
    LowerLimitGapMin = 20,
    LowerLimitBaselineDropMin = 21,
    StackTopShiftUp = 22,
    StackTopDisplayStyleShiftUp = 23,
    StackBottomShiftDown = 24,
    StackBottomDisplayStyleShiftDown = 25,
    StackGapMin = 26,
    StackDisplayStyleGapMin = 27,
    StretchStackTopShiftUp = 28,
    StretchStackBottomShiftDown = 29,
    StretchStackGapAboveMin = 30,
    StretchStackGapBelowMin = 31,
    FractionNumeratorShiftUp = 32,
    FractionNumeratorDisplayStyleShiftUp = 33,
    FractionDenominatorShiftDown = 34,
    FractionDenominatorDisplayStyleShiftDown = 35,
    FractionNumeratorGapMin = 36,
    FractionNumDisplayStyleGapMin = 37,
    FractionRuleThickness = 38,
    FractionDenominatorGapMin = 39,
    FractionDenomDisplayStyleGapMin = 40,
    SkewedFractionHorizontalGap = 41,
    SkewedFractionVerticalGap = 42,
    OverbarVerticalGap = 43,
    OverbarRuleThickness = 44,
    OverbarExtraAscender = 45,
    UnderbarVerticalGap = 46,
    UnderbarRuleThickness = 47,
    UnderbarExtraDescender = 48,
    RadicalVerticalGap = 49,
    RadicalDisplayStyleVerticalGap = 50,
    RadicalRuleThickness = 51,
    RadicalExtraAscender = 52,
    RadicalKernBeforeDegree = 53,
    RadicalKernAfterDegree = 54,
    RadicalDegreeBottomRaisePercent = 55,
}
pub const HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN: hb_ot_math_constant_t = hb_ot_math_constant_t::ScriptPercentScaleDown;
pub const HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN: hb_ot_math_constant_t = hb_ot_math_constant_t::ScriptScriptPercentScaleDown;
pub const HB_OT_MATH_CONSTANT_DELIMITED_SUB_FORMULA_MIN_HEIGHT: hb_ot_math_constant_t = hb_ot_math_constant_t::DelimitedSubFormulaMinHeight;
pub const HB_OT_MATH_CONSTANT_DISPLAY_OPERATOR_MIN_HEIGHT: hb_ot_math_constant_t = hb_ot_math_constant_t::DisplayOperatorMinHeight;
pub const HB_OT_MATH_CONSTANT_MATH_LEADING: hb_ot_math_constant_t = hb_ot_math_constant_t::MathLeading;
pub const HB_OT_MATH_CONSTANT_AXIS_HEIGHT: hb_ot_math_constant_t = hb_ot_math_constant_t::AxisHeight;
pub const HB_OT_MATH_CONSTANT_ACCENT_BASE_HEIGHT: hb_ot_math_constant_t = hb_ot_math_constant_t::AccentBaseHeight;
pub const HB_OT_MATH_CONSTANT_FLATTENED_ACCENT_BASE_HEIGHT: hb_ot_math_constant_t = hb_ot_math_constant_t::FlattenedAccentBaseHeight;
pub const HB_OT_MATH_CONSTANT_SUBSCRIPT_SHIFT_DOWN: hb_ot_math_constant_t = hb_ot_math_constant_t::SubscriptShiftDown;
pub const HB_OT_MATH_CONSTANT_SUBSCRIPT_TOP_MAX: hb_ot_math_constant_t = hb_ot_math_constant_t::SubscriptTopMax;
pub const HB_OT_MATH_CONSTANT_SUBSCRIPT_BASELINE_DROP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::SubscriptBaselineDropMin;
pub const HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP: hb_ot_math_constant_t = hb_ot_math_constant_t::SuperscriptShiftUp;
pub const HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP_CRAMPED: hb_ot_math_constant_t = hb_ot_math_constant_t::SuperscriptShiftUpCramped;
pub const HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::SuperscriptBottomMin;
pub const HB_OT_MATH_CONSTANT_SUPERSCRIPT_BASELINE_DROP_MAX: hb_ot_math_constant_t = hb_ot_math_constant_t::SuperscriptBaselineDropMax;
pub const HB_OT_MATH_CONSTANT_SUB_SUPERSCRIPT_GAP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::SubSuperscriptGapMin;
pub const HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MAX_WITH_SUBSCRIPT: hb_ot_math_constant_t = hb_ot_math_constant_t::SuperscriptBottomMaxWithSubscript;
pub const HB_OT_MATH_CONSTANT_SPACE_AFTER_SCRIPT: hb_ot_math_constant_t = hb_ot_math_constant_t::SpaceAfterScript;
pub const HB_OT_MATH_CONSTANT_UPPER_LIMIT_GAP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::UpperLimitGapMin;
pub const HB_OT_MATH_CONSTANT_UPPER_LIMIT_BASELINE_RISE_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::UpperLimitBaselineRiseMin;
pub const HB_OT_MATH_CONSTANT_LOWER_LIMIT_GAP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::LowerLimitGapMin;
pub const HB_OT_MATH_CONSTANT_LOWER_LIMIT_BASELINE_DROP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::LowerLimitBaselineDropMin;
pub const HB_OT_MATH_CONSTANT_STACK_TOP_SHIFT_UP: hb_ot_math_constant_t = hb_ot_math_constant_t::StackTopShiftUp;
pub const HB_OT_MATH_CONSTANT_STACK_TOP_DISPLAY_STYLE_SHIFT_UP: hb_ot_math_constant_t = hb_ot_math_constant_t::StackTopDisplayStyleShiftUp;
pub const HB_OT_MATH_CONSTANT_STACK_BOTTOM_SHIFT_DOWN: hb_ot_math_constant_t = hb_ot_math_constant_t::StackBottomShiftDown;
pub const HB_OT_MATH_CONSTANT_STACK_BOTTOM_DISPLAY_STYLE_SHIFT_DOWN: hb_ot_math_constant_t = hb_ot_math_constant_t::StackBottomDisplayStyleShiftDown;
pub const HB_OT_MATH_CONSTANT_STACK_GAP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::StackGapMin;
pub const HB_OT_MATH_CONSTANT_STACK_DISPLAY_STYLE_GAP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::StackDisplayStyleGapMin;
pub const HB_OT_MATH_CONSTANT_STRETCH_STACK_TOP_SHIFT_UP: hb_ot_math_constant_t = hb_ot_math_constant_t::StretchStackTopShiftUp;
pub const HB_OT_MATH_CONSTANT_STRETCH_STACK_BOTTOM_SHIFT_DOWN: hb_ot_math_constant_t = hb_ot_math_constant_t::StretchStackBottomShiftDown;
pub const HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_ABOVE_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::StretchStackGapAboveMin;
pub const HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_BELOW_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::StretchStackGapBelowMin;
pub const HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_SHIFT_UP: hb_ot_math_constant_t = hb_ot_math_constant_t::FractionNumeratorShiftUp;
pub const HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_DISPLAY_STYLE_SHIFT_UP: hb_ot_math_constant_t = hb_ot_math_constant_t::FractionNumeratorDisplayStyleShiftUp;
pub const HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_SHIFT_DOWN: hb_ot_math_constant_t = hb_ot_math_constant_t::FractionDenominatorShiftDown;
pub const HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_DISPLAY_STYLE_SHIFT_DOWN: hb_ot_math_constant_t = hb_ot_math_constant_t::FractionDenominatorDisplayStyleShiftDown;
pub const HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_GAP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::FractionNumeratorGapMin;
pub const HB_OT_MATH_CONSTANT_FRACTION_NUM_DISPLAY_STYLE_GAP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::FractionNumDisplayStyleGapMin;
pub const HB_OT_MATH_CONSTANT_FRACTION_RULE_THICKNESS: hb_ot_math_constant_t = hb_ot_math_constant_t::FractionRuleThickness;
pub const HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_GAP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::FractionDenominatorGapMin;
pub const HB_OT_MATH_CONSTANT_FRACTION_DENOM_DISPLAY_STYLE_GAP_MIN: hb_ot_math_constant_t = hb_ot_math_constant_t::FractionDenomDisplayStyleGapMin;
pub const HB_OT_MATH_CONSTANT_SKEWED_FRACTION_HORIZONTAL_GAP: hb_ot_math_constant_t = hb_ot_math_constant_t::SkewedFractionHorizontalGap;
pub const HB_OT_MATH_CONSTANT_SKEWED_FRACTION_VERTICAL_GAP: hb_ot_math_constant_t = hb_ot_math_constant_t::SkewedFractionVerticalGap;
pub const HB_OT_MATH_CONSTANT_OVERBAR_VERTICAL_GAP: hb_ot_math_constant_t = hb_ot_math_constant_t::OverbarVerticalGap;
pub const HB_OT_MATH_CONSTANT_OVERBAR_RULE_THICKNESS: hb_ot_math_constant_t = hb_ot_math_constant_t::OverbarRuleThickness;
pub const HB_OT_MATH_CONSTANT_OVERBAR_EXTRA_ASCENDER: hb_ot_math_constant_t = hb_ot_math_constant_t::OverbarExtraAscender;
pub const HB_OT_MATH_CONSTANT_UNDERBAR_VERTICAL_GAP: hb_ot_math_constant_t = hb_ot_math_constant_t::UnderbarVerticalGap;
pub const HB_OT_MATH_CONSTANT_UNDERBAR_RULE_THICKNESS: hb_ot_math_constant_t = hb_ot_math_constant_t::UnderbarRuleThickness;
pub const HB_OT_MATH_CONSTANT_UNDERBAR_EXTRA_DESCENDER: hb_ot_math_constant_t = hb_ot_math_constant_t::UnderbarExtraDescender;
pub const HB_OT_MATH_CONSTANT_RADICAL_VERTICAL_GAP: hb_ot_math_constant_t = hb_ot_math_constant_t::RadicalVerticalGap;
pub const HB_OT_MATH_CONSTANT_RADICAL_DISPLAY_STYLE_VERTICAL_GAP: hb_ot_math_constant_t = hb_ot_math_constant_t::RadicalDisplayStyleVerticalGap;
pub const HB_OT_MATH_CONSTANT_RADICAL_RULE_THICKNESS: hb_ot_math_constant_t = hb_ot_math_constant_t::RadicalRuleThickness;
pub const HB_OT_MATH_CONSTANT_RADICAL_EXTRA_ASCENDER: hb_ot_math_constant_t = hb_ot_math_constant_t::RadicalExtraAscender;
pub const HB_OT_MATH_CONSTANT_RADICAL_KERN_BEFORE_DEGREE: hb_ot_math_constant_t = hb_ot_math_constant_t::RadicalKernBeforeDegree;
pub const HB_OT_MATH_CONSTANT_RADICAL_KERN_AFTER_DEGREE: hb_ot_math_constant_t = hb_ot_math_constant_t::RadicalKernAfterDegree;
pub const HB_OT_MATH_CONSTANT_RADICAL_DEGREE_BOTTOM_RAISE_PERCENT: hb_ot_math_constant_t = hb_ot_math_constant_t::RadicalDegreeBottomRaisePercent;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_ot_math_kern_t {
    TopRight = 0,
    TopLeft = 1,
    BottomRight = 2,
    BottomLeft = 3,
}
pub const HB_OT_MATH_KERN_TOP_RIGHT: hb_ot_math_kern_t = hb_ot_math_kern_t::TopRight;
pub const HB_OT_MATH_KERN_TOP_LEFT: hb_ot_math_kern_t = hb_ot_math_kern_t::TopLeft;
pub const HB_OT_MATH_KERN_BOTTOM_RIGHT: hb_ot_math_kern_t = hb_ot_math_kern_t::BottomRight;
pub const HB_OT_MATH_KERN_BOTTOM_LEFT: hb_ot_math_kern_t = hb_ot_math_kern_t::BottomLeft;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_script_t {
    Common = 1517910393,
    Inherited = 1516858984,
    Unknown = 1517976186,
    Arabic = 1098015074,
    Armenian = 1098018158,
    Bengali = 1113943655,
    Cyrillic = 1132032620,
    Devanagari = 1147500129,
    Georgian = 1197830002,
    Greek = 1198679403,
    Gujarati = 1198877298,
    Gurmukhi = 1198879349,
    Hangul = 1214344807,
    Han = 1214344809,
    Hebrew = 1214603890,
    Hiragana = 1214870113,
    Kannada = 1265525857,
    Katakana = 1264676449,
    Lao = 1281453935,
    Latin = 1281455214,
    Malayalam = 1298954605,
    Oriya = 1332902241,
    Tamil = 1415671148,
    Telugu = 1415933045,
    Thai = 1416126825,
    Tibetan = 1416192628,
    Bopomofo = 1114599535,
    Braille = 1114792297,
    CanadianSyllabics = 1130458739,
    Cherokee = 1130915186,
    Ethiopic = 1165256809,
    Khmer = 1265134962,
    Mongolian = 1299148391,
    Myanmar = 1299803506,
    Ogham = 1332175213,
    Runic = 1383427698,
    Sinhala = 1399418472,
    Syriac = 1400468067,
    Thaana = 1416126817,
    Yi = 1500080489,
    Deseret = 1148416628,
    Gothic = 1198486632,
    OldItalic = 1232363884,
    Buhid = 1114990692,
    Hanunoo = 1214344815,
    Tagalog = 1416064103,
    Tagbanwa = 1415669602,
    Cypriot = 1131442804,
    Limbu = 1281977698,
    LinearB = 1281977954,
    Osmanya = 1332964705,
    Shavian = 1399349623,
    TaiLe = 1415670885,
    Ugaritic = 1432838514,
    Buginese = 1114990441,
    Coptic = 1131376756,
    Glagolitic = 1198285159,
    Kharoshthi = 1265131890,
    NewTaiLue = 1415670901,
    OldPersian = 1483761007,
    SylotiNagri = 1400466543,
    Tifinagh = 1415999079,
    Balinese = 1113681001,
    Cuneiform = 1483961720,
    Nko = 1315663727,
    PhagsPa = 1349017959,
    Phoenician = 1349021304,
    Carian = 1130459753,
    Cham = 1130914157,
    KayahLi = 1264675945,
    Lepcha = 1281716323,
    Lycian = 1283023721,
    Lydian = 1283023977,
    OlChiki = 1332503403,
    Rejang = 1382706791,
    Saurashtra = 1398895986,
    Sundanese = 1400204900,
    Vai = 1449224553,
    Avestan = 1098281844,
    Bamum = 1113681269,
    EgyptianHieroglyphs = 1164409200,
    ImperialAramaic = 1098018153,
    InscriptionalPahlavi = 1349020777,
    InscriptionalParthian = 1349678185,
    Javanese = 1247901281,
    Kaithi = 1265920105,
    Lisu = 1281979253,
    MeeteiMayek = 1299473769,
    OldSouthArabian = 1398895202,
    OldTurkic = 1332898664,
    Samaritan = 1398893938,
    TaiTham = 1281453665,
    TaiViet = 1415673460,
    Batak = 1113683051,
    Brahmi = 1114792296,
    Mandaic = 1298230884,
    Chakma = 1130457965,
    MeroiticCursive = 1298494051,
    MeroiticHieroglyphs = 1298494063,
    Miao = 1349284452,
    Sharada = 1399353956,
    SoraSompeng = 1399812705,
    Takri = 1415670642,
    BassaVah = 1113682803,
    CaucasianAlbanian = 1097295970,
    Duployan = 1148547180,
    Elbasan = 1164730977,
    Grantha = 1198678382,
    Khojki = 1265135466,
    Khudawadi = 1399418468,
    LinearA = 1281977953,
    Mahajani = 1298229354,
    Manichaean = 1298230889,
    MendeKikakui = 1298493028,
    Modi = 1299145833,
    Mro = 1299345263,
    Nabataean = 1315070324,
    OldNorthArabian = 1315009122,
    OldPermic = 1348825709,
    PahawhHmong = 1215131239,
    Palmyrene = 1348562029,
    PauCinHau = 1348564323,
    PsalterPahlavi = 1349020784,
    Siddham = 1399415908,
    Tirhuta = 1416196712,
    WarangCiti = 1466004065,
    Ahom = 1097363309,
    AnatolianHieroglyphs = 1215067511,
    Hatran = 1214346354,
    Multani = 1299541108,
    OldHungarian = 1215655527,
    Signwriting = 1399287415,
    Adlam = 1097100397,
    Bhaiksuki = 1114139507,
    Marchen = 1298231907,
    Osage = 1332963173,
    Tangut = 1415671399,
    Newa = 1315272545,
    Invalid = 0,
}
pub const HB_SCRIPT_COMMON: hb_script_t = hb_script_t::Common;
pub const HB_SCRIPT_INHERITED: hb_script_t = hb_script_t::Inherited;
pub const HB_SCRIPT_UNKNOWN: hb_script_t = hb_script_t::Unknown;
pub const HB_SCRIPT_ARABIC: hb_script_t = hb_script_t::Arabic;
pub const HB_SCRIPT_ARMENIAN: hb_script_t = hb_script_t::Armenian;
pub const HB_SCRIPT_BENGALI: hb_script_t = hb_script_t::Bengali;
pub const HB_SCRIPT_CYRILLIC: hb_script_t = hb_script_t::Cyrillic;
pub const HB_SCRIPT_DEVANAGARI: hb_script_t = hb_script_t::Devanagari;
pub const HB_SCRIPT_GEORGIAN: hb_script_t = hb_script_t::Georgian;
pub const HB_SCRIPT_GREEK: hb_script_t = hb_script_t::Greek;
pub const HB_SCRIPT_GUJARATI: hb_script_t = hb_script_t::Gujarati;
pub const HB_SCRIPT_GURMUKHI: hb_script_t = hb_script_t::Gurmukhi;
pub const HB_SCRIPT_HANGUL: hb_script_t = hb_script_t::Hangul;
pub const HB_SCRIPT_HAN: hb_script_t = hb_script_t::Han;
pub const HB_SCRIPT_HEBREW: hb_script_t = hb_script_t::Hebrew;
pub const HB_SCRIPT_HIRAGANA: hb_script_t = hb_script_t::Hiragana;
pub const HB_SCRIPT_KANNADA: hb_script_t = hb_script_t::Kannada;
pub const HB_SCRIPT_KATAKANA: hb_script_t = hb_script_t::Katakana;
pub const HB_SCRIPT_LAO: hb_script_t = hb_script_t::Lao;
pub const HB_SCRIPT_LATIN: hb_script_t = hb_script_t::Latin;
pub const HB_SCRIPT_MALAYALAM: hb_script_t = hb_script_t::Malayalam;
pub const HB_SCRIPT_ORIYA: hb_script_t = hb_script_t::Oriya;
pub const HB_SCRIPT_TAMIL: hb_script_t = hb_script_t::Tamil;
pub const HB_SCRIPT_TELUGU: hb_script_t = hb_script_t::Telugu;
pub const HB_SCRIPT_THAI: hb_script_t = hb_script_t::Thai;
pub const HB_SCRIPT_TIBETAN: hb_script_t = hb_script_t::Tibetan;
pub const HB_SCRIPT_BOPOMOFO: hb_script_t = hb_script_t::Bopomofo;
pub const HB_SCRIPT_BRAILLE: hb_script_t = hb_script_t::Braille;
pub const HB_SCRIPT_CANADIAN_SYLLABICS: hb_script_t = hb_script_t::CanadianSyllabics;
pub const HB_SCRIPT_CHEROKEE: hb_script_t = hb_script_t::Cherokee;
pub const HB_SCRIPT_ETHIOPIC: hb_script_t = hb_script_t::Ethiopic;
pub const HB_SCRIPT_KHMER: hb_script_t = hb_script_t::Khmer;
pub const HB_SCRIPT_MONGOLIAN: hb_script_t = hb_script_t::Mongolian;
pub const HB_SCRIPT_MYANMAR: hb_script_t = hb_script_t::Myanmar;
pub const HB_SCRIPT_OGHAM: hb_script_t = hb_script_t::Ogham;
pub const HB_SCRIPT_RUNIC: hb_script_t = hb_script_t::Runic;
pub const HB_SCRIPT_SINHALA: hb_script_t = hb_script_t::Sinhala;
pub const HB_SCRIPT_SYRIAC: hb_script_t = hb_script_t::Syriac;
pub const HB_SCRIPT_THAANA: hb_script_t = hb_script_t::Thaana;
pub const HB_SCRIPT_YI: hb_script_t = hb_script_t::Yi;
pub const HB_SCRIPT_DESERET: hb_script_t = hb_script_t::Deseret;
pub const HB_SCRIPT_GOTHIC: hb_script_t = hb_script_t::Gothic;
pub const HB_SCRIPT_OLD_ITALIC: hb_script_t = hb_script_t::OldItalic;
pub const HB_SCRIPT_BUHID: hb_script_t = hb_script_t::Buhid;
pub const HB_SCRIPT_HANUNOO: hb_script_t = hb_script_t::Hanunoo;
pub const HB_SCRIPT_TAGALOG: hb_script_t = hb_script_t::Tagalog;
pub const HB_SCRIPT_TAGBANWA: hb_script_t = hb_script_t::Tagbanwa;
pub const HB_SCRIPT_CYPRIOT: hb_script_t = hb_script_t::Cypriot;
pub const HB_SCRIPT_LIMBU: hb_script_t = hb_script_t::Limbu;
pub const HB_SCRIPT_LINEAR_B: hb_script_t = hb_script_t::LinearB;
pub const HB_SCRIPT_OSMANYA: hb_script_t = hb_script_t::Osmanya;
pub const HB_SCRIPT_SHAVIAN: hb_script_t = hb_script_t::Shavian;
pub const HB_SCRIPT_TAI_LE: hb_script_t = hb_script_t::TaiLe;
pub const HB_SCRIPT_UGARITIC: hb_script_t = hb_script_t::Ugaritic;
pub const HB_SCRIPT_BUGINESE: hb_script_t = hb_script_t::Buginese;
pub const HB_SCRIPT_COPTIC: hb_script_t = hb_script_t::Coptic;
pub const HB_SCRIPT_GLAGOLITIC: hb_script_t = hb_script_t::Glagolitic;
pub const HB_SCRIPT_KHAROSHTHI: hb_script_t = hb_script_t::Kharoshthi;
pub const HB_SCRIPT_NEW_TAI_LUE: hb_script_t = hb_script_t::NewTaiLue;
pub const HB_SCRIPT_OLD_PERSIAN: hb_script_t = hb_script_t::OldPersian;
pub const HB_SCRIPT_SYLOTI_NAGRI: hb_script_t = hb_script_t::SylotiNagri;
pub const HB_SCRIPT_TIFINAGH: hb_script_t = hb_script_t::Tifinagh;
pub const HB_SCRIPT_BALINESE: hb_script_t = hb_script_t::Balinese;
pub const HB_SCRIPT_CUNEIFORM: hb_script_t = hb_script_t::Cuneiform;
pub const HB_SCRIPT_NKO: hb_script_t = hb_script_t::Nko;
pub const HB_SCRIPT_PHAGS_PA: hb_script_t = hb_script_t::PhagsPa;
pub const HB_SCRIPT_PHOENICIAN: hb_script_t = hb_script_t::Phoenician;
pub const HB_SCRIPT_CARIAN: hb_script_t = hb_script_t::Carian;
pub const HB_SCRIPT_CHAM: hb_script_t = hb_script_t::Cham;
pub const HB_SCRIPT_KAYAH_LI: hb_script_t = hb_script_t::KayahLi;
pub const HB_SCRIPT_LEPCHA: hb_script_t = hb_script_t::Lepcha;
pub const HB_SCRIPT_LYCIAN: hb_script_t = hb_script_t::Lycian;
pub const HB_SCRIPT_LYDIAN: hb_script_t = hb_script_t::Lydian;
pub const HB_SCRIPT_OL_CHIKI: hb_script_t = hb_script_t::OlChiki;
pub const HB_SCRIPT_REJANG: hb_script_t = hb_script_t::Rejang;
pub const HB_SCRIPT_SAURASHTRA: hb_script_t = hb_script_t::Saurashtra;
pub const HB_SCRIPT_SUNDANESE: hb_script_t = hb_script_t::Sundanese;
pub const HB_SCRIPT_VAI: hb_script_t = hb_script_t::Vai;
pub const HB_SCRIPT_AVESTAN: hb_script_t = hb_script_t::Avestan;
pub const HB_SCRIPT_BAMUM: hb_script_t = hb_script_t::Bamum;
pub const HB_SCRIPT_EGYPTIAN_HIEROGLYPHS: hb_script_t = hb_script_t::EgyptianHieroglyphs;
pub const HB_SCRIPT_IMPERIAL_ARAMAIC: hb_script_t = hb_script_t::ImperialAramaic;
pub const HB_SCRIPT_INSCRIPTIONAL_PAHLAVI: hb_script_t = hb_script_t::InscriptionalPahlavi;
pub const HB_SCRIPT_INSCRIPTIONAL_PARTHIAN: hb_script_t = hb_script_t::InscriptionalParthian;
pub const HB_SCRIPT_JAVANESE: hb_script_t = hb_script_t::Javanese;
pub const HB_SCRIPT_KAITHI: hb_script_t = hb_script_t::Kaithi;
pub const HB_SCRIPT_LISU: hb_script_t = hb_script_t::Lisu;
pub const HB_SCRIPT_MEETEI_MAYEK: hb_script_t = hb_script_t::MeeteiMayek;
pub const HB_SCRIPT_OLD_SOUTH_ARABIAN: hb_script_t = hb_script_t::OldSouthArabian;
pub const HB_SCRIPT_OLD_TURKIC: hb_script_t = hb_script_t::OldTurkic;
pub const HB_SCRIPT_SAMARITAN: hb_script_t = hb_script_t::Samaritan;
pub const HB_SCRIPT_TAI_THAM: hb_script_t = hb_script_t::TaiTham;
pub const HB_SCRIPT_TAI_VIET: hb_script_t = hb_script_t::TaiViet;
pub const HB_SCRIPT_BATAK: hb_script_t = hb_script_t::Batak;
pub const HB_SCRIPT_BRAHMI: hb_script_t = hb_script_t::Brahmi;
pub const HB_SCRIPT_MANDAIC: hb_script_t = hb_script_t::Mandaic;
pub const HB_SCRIPT_CHAKMA: hb_script_t = hb_script_t::Chakma;
pub const HB_SCRIPT_MEROITIC_CURSIVE: hb_script_t = hb_script_t::MeroiticCursive;
pub const HB_SCRIPT_MEROITIC_HIEROGLYPHS: hb_script_t = hb_script_t::MeroiticHieroglyphs;
pub const HB_SCRIPT_MIAO: hb_script_t = hb_script_t::Miao;
pub const HB_SCRIPT_SHARADA: hb_script_t = hb_script_t::Sharada;
pub const HB_SCRIPT_SORA_SOMPENG: hb_script_t = hb_script_t::SoraSompeng;
pub const HB_SCRIPT_TAKRI: hb_script_t = hb_script_t::Takri;
pub const HB_SCRIPT_BASSA_VAH: hb_script_t = hb_script_t::BassaVah;
pub const HB_SCRIPT_CAUCASIAN_ALBANIAN: hb_script_t = hb_script_t::CaucasianAlbanian;
pub const HB_SCRIPT_DUPLOYAN: hb_script_t = hb_script_t::Duployan;
pub const HB_SCRIPT_ELBASAN: hb_script_t = hb_script_t::Elbasan;
pub const HB_SCRIPT_GRANTHA: hb_script_t = hb_script_t::Grantha;
pub const HB_SCRIPT_KHOJKI: hb_script_t = hb_script_t::Khojki;
pub const HB_SCRIPT_KHUDAWADI: hb_script_t = hb_script_t::Khudawadi;
pub const HB_SCRIPT_LINEAR_A: hb_script_t = hb_script_t::LinearA;
pub const HB_SCRIPT_MAHAJANI: hb_script_t = hb_script_t::Mahajani;
pub const HB_SCRIPT_MANICHAEAN: hb_script_t = hb_script_t::Manichaean;
pub const HB_SCRIPT_MENDE_KIKAKUI: hb_script_t = hb_script_t::MendeKikakui;
pub const HB_SCRIPT_MODI: hb_script_t = hb_script_t::Modi;
pub const HB_SCRIPT_MRO: hb_script_t = hb_script_t::Mro;
pub const HB_SCRIPT_NABATAEAN: hb_script_t = hb_script_t::Nabataean;
pub const HB_SCRIPT_OLD_NORTH_ARABIAN: hb_script_t = hb_script_t::OldNorthArabian;
pub const HB_SCRIPT_OLD_PERMIC: hb_script_t = hb_script_t::OldPermic;
pub const HB_SCRIPT_PAHAWH_HMONG: hb_script_t = hb_script_t::PahawhHmong;
pub const HB_SCRIPT_PALMYRENE: hb_script_t = hb_script_t::Palmyrene;
pub const HB_SCRIPT_PAU_CIN_HAU: hb_script_t = hb_script_t::PauCinHau;
pub const HB_SCRIPT_PSALTER_PAHLAVI: hb_script_t = hb_script_t::PsalterPahlavi;
pub const HB_SCRIPT_SIDDHAM: hb_script_t = hb_script_t::Siddham;
pub const HB_SCRIPT_TIRHUTA: hb_script_t = hb_script_t::Tirhuta;
pub const HB_SCRIPT_WARANG_CITI: hb_script_t = hb_script_t::WarangCiti;
pub const HB_SCRIPT_AHOM: hb_script_t = hb_script_t::Ahom;
pub const HB_SCRIPT_ANATOLIAN_HIEROGLYPHS: hb_script_t = hb_script_t::AnatolianHieroglyphs;
pub const HB_SCRIPT_HATRAN: hb_script_t = hb_script_t::Hatran;
pub const HB_SCRIPT_MULTANI: hb_script_t = hb_script_t::Multani;
pub const HB_SCRIPT_OLD_HUNGARIAN: hb_script_t = hb_script_t::OldHungarian;
pub const HB_SCRIPT_SIGNWRITING: hb_script_t = hb_script_t::Signwriting;
pub const HB_SCRIPT_ADLAM: hb_script_t = hb_script_t::Adlam;
pub const HB_SCRIPT_BHAIKSUKI: hb_script_t = hb_script_t::Bhaiksuki;
pub const HB_SCRIPT_MARCHEN: hb_script_t = hb_script_t::Marchen;
pub const HB_SCRIPT_OSAGE: hb_script_t = hb_script_t::Osage;
pub const HB_SCRIPT_TANGUT: hb_script_t = hb_script_t::Tangut;
pub const HB_SCRIPT_NEWA: hb_script_t = hb_script_t::Newa;
pub const HB_SCRIPT_INVALID: hb_script_t = hb_script_t::Invalid;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_unicode_combining_class_t {
    NotReordered = 0,
    Overlay = 1,
    Nukta = 7,
    KanaVoicing = 8,
    Virama = 9,
    Ccc10 = 10,
    Ccc11 = 11,
    Ccc12 = 12,
    Ccc13 = 13,
    Ccc14 = 14,
    Ccc15 = 15,
    Ccc16 = 16,
    Ccc17 = 17,
    Ccc18 = 18,
    Ccc19 = 19,
    Ccc20 = 20,
    Ccc21 = 21,
    Ccc22 = 22,
    Ccc23 = 23,
    Ccc24 = 24,
    Ccc25 = 25,
    Ccc26 = 26,
    Ccc27 = 27,
    Ccc28 = 28,
    Ccc29 = 29,
    Ccc30 = 30,
    Ccc31 = 31,
    Ccc32 = 32,
    Ccc33 = 33,
    Ccc34 = 34,
    Ccc35 = 35,
    Ccc36 = 36,
    Ccc84 = 84,
    Ccc91 = 91,
    Ccc103 = 103,
    Ccc107 = 107,
    Ccc118 = 118,
    Ccc122 = 122,
    Ccc129 = 129,
    Ccc130 = 130,
    Ccc133 = 132,
    AttachedBelowLeft = 200,
    AttachedBelow = 202,
    AttachedAbove = 214,
    AttachedAboveRight = 216,
    BelowLeft = 218,
    Below = 220,
    BelowRight = 222,
    Left = 224,
    Right = 226,
    AboveLeft = 228,
    Above = 230,
    AboveRight = 232,
    DoubleBelow = 233,
    DoubleAbove = 234,
    IotaSubscript = 240,
    Invalid = 255,
}
pub const HB_UNICODE_COMBINING_CLASS_NOT_REORDERED: hb_unicode_combining_class_t = hb_unicode_combining_class_t::NotReordered;
pub const HB_UNICODE_COMBINING_CLASS_OVERLAY: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Overlay;
pub const HB_UNICODE_COMBINING_CLASS_NUKTA: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Nukta;
pub const HB_UNICODE_COMBINING_CLASS_KANA_VOICING: hb_unicode_combining_class_t = hb_unicode_combining_class_t::KanaVoicing;
pub const HB_UNICODE_COMBINING_CLASS_VIRAMA: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Virama;
pub const HB_UNICODE_COMBINING_CLASS_CCC10: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc10;
pub const HB_UNICODE_COMBINING_CLASS_CCC11: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc11;
pub const HB_UNICODE_COMBINING_CLASS_CCC12: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc12;
pub const HB_UNICODE_COMBINING_CLASS_CCC13: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc13;
pub const HB_UNICODE_COMBINING_CLASS_CCC14: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc14;
pub const HB_UNICODE_COMBINING_CLASS_CCC15: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc15;
pub const HB_UNICODE_COMBINING_CLASS_CCC16: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc16;
pub const HB_UNICODE_COMBINING_CLASS_CCC17: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc17;
pub const HB_UNICODE_COMBINING_CLASS_CCC18: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc18;
pub const HB_UNICODE_COMBINING_CLASS_CCC19: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc19;
pub const HB_UNICODE_COMBINING_CLASS_CCC20: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc20;
pub const HB_UNICODE_COMBINING_CLASS_CCC21: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc21;
pub const HB_UNICODE_COMBINING_CLASS_CCC22: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc22;
pub const HB_UNICODE_COMBINING_CLASS_CCC23: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc23;
pub const HB_UNICODE_COMBINING_CLASS_CCC24: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc24;
pub const HB_UNICODE_COMBINING_CLASS_CCC25: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc25;
pub const HB_UNICODE_COMBINING_CLASS_CCC26: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc26;
pub const HB_UNICODE_COMBINING_CLASS_CCC27: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc27;
pub const HB_UNICODE_COMBINING_CLASS_CCC28: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc28;
pub const HB_UNICODE_COMBINING_CLASS_CCC29: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc29;
pub const HB_UNICODE_COMBINING_CLASS_CCC30: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc30;
pub const HB_UNICODE_COMBINING_CLASS_CCC31: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc31;
pub const HB_UNICODE_COMBINING_CLASS_CCC32: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc32;
pub const HB_UNICODE_COMBINING_CLASS_CCC33: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc33;
pub const HB_UNICODE_COMBINING_CLASS_CCC34: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc34;
pub const HB_UNICODE_COMBINING_CLASS_CCC35: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc35;
pub const HB_UNICODE_COMBINING_CLASS_CCC36: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc36;
pub const HB_UNICODE_COMBINING_CLASS_CCC84: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc84;
pub const HB_UNICODE_COMBINING_CLASS_CCC91: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc91;
pub const HB_UNICODE_COMBINING_CLASS_CCC103: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc103;
pub const HB_UNICODE_COMBINING_CLASS_CCC107: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc107;
pub const HB_UNICODE_COMBINING_CLASS_CCC118: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc118;
pub const HB_UNICODE_COMBINING_CLASS_CCC122: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc122;
pub const HB_UNICODE_COMBINING_CLASS_CCC129: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc129;
pub const HB_UNICODE_COMBINING_CLASS_CCC130: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc130;
pub const HB_UNICODE_COMBINING_CLASS_CCC133: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Ccc133;
pub const HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT: hb_unicode_combining_class_t = hb_unicode_combining_class_t::AttachedBelowLeft;
pub const HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW: hb_unicode_combining_class_t = hb_unicode_combining_class_t::AttachedBelow;
pub const HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE: hb_unicode_combining_class_t = hb_unicode_combining_class_t::AttachedAbove;
pub const HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT: hb_unicode_combining_class_t = hb_unicode_combining_class_t::AttachedAboveRight;
pub const HB_UNICODE_COMBINING_CLASS_BELOW_LEFT: hb_unicode_combining_class_t = hb_unicode_combining_class_t::BelowLeft;
pub const HB_UNICODE_COMBINING_CLASS_BELOW: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Below;
pub const HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT: hb_unicode_combining_class_t = hb_unicode_combining_class_t::BelowRight;
pub const HB_UNICODE_COMBINING_CLASS_LEFT: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Left;
pub const HB_UNICODE_COMBINING_CLASS_RIGHT: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Right;
pub const HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT: hb_unicode_combining_class_t = hb_unicode_combining_class_t::AboveLeft;
pub const HB_UNICODE_COMBINING_CLASS_ABOVE: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Above;
pub const HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT: hb_unicode_combining_class_t = hb_unicode_combining_class_t::AboveRight;
pub const HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW: hb_unicode_combining_class_t = hb_unicode_combining_class_t::DoubleBelow;
pub const HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE: hb_unicode_combining_class_t = hb_unicode_combining_class_t::DoubleAbove;
pub const HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT: hb_unicode_combining_class_t = hb_unicode_combining_class_t::IotaSubscript;
pub const HB_UNICODE_COMBINING_CLASS_INVALID: hb_unicode_combining_class_t = hb_unicode_combining_class_t::Invalid;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum hb_unicode_general_category_t {
    Control = 0,
    Format = 1,
    Unassigned = 2,
    PrivateUse = 3,
    Surrogate = 4,
    LowercaseLetter = 5,
    ModifierLetter = 6,
    OtherLetter = 7,
    TitlecaseLetter = 8,
    UppercaseLetter = 9,
    SpacingMark = 10,
    EnclosingMark = 11,
    NonSpacingMark = 12,
    DecimalNumber = 13,
    LetterNumber = 14,
    OtherNumber = 15,
    ConnectPunctuation = 16,
    DashPunctuation = 17,
    ClosePunctuation = 18,
    FinalPunctuation = 19,
    InitialPunctuation = 20,
    OtherPunctuation = 21,
    OpenPunctuation = 22,
    CurrencySymbol = 23,
    ModifierSymbol = 24,
    MathSymbol = 25,
    OtherSymbol = 26,
    LineSeparator = 27,
    ParagraphSeparator = 28,
    SpaceSeparator = 29,
}
pub const HB_UNICODE_GENERAL_CATEGORY_CONTROL: hb_unicode_general_category_t = hb_unicode_general_category_t::Control;
pub const HB_UNICODE_GENERAL_CATEGORY_FORMAT: hb_unicode_general_category_t = hb_unicode_general_category_t::Format;
pub const HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED: hb_unicode_general_category_t = hb_unicode_general_category_t::Unassigned;
pub const HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE: hb_unicode_general_category_t = hb_unicode_general_category_t::PrivateUse;
pub const HB_UNICODE_GENERAL_CATEGORY_SURROGATE: hb_unicode_general_category_t = hb_unicode_general_category_t::Surrogate;
pub const HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER: hb_unicode_general_category_t = hb_unicode_general_category_t::LowercaseLetter;
pub const HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER: hb_unicode_general_category_t = hb_unicode_general_category_t::ModifierLetter;
pub const HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER: hb_unicode_general_category_t = hb_unicode_general_category_t::OtherLetter;
pub const HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER: hb_unicode_general_category_t = hb_unicode_general_category_t::TitlecaseLetter;
pub const HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER: hb_unicode_general_category_t = hb_unicode_general_category_t::UppercaseLetter;
pub const HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK: hb_unicode_general_category_t = hb_unicode_general_category_t::SpacingMark;
pub const HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK: hb_unicode_general_category_t = hb_unicode_general_category_t::EnclosingMark;
pub const HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK: hb_unicode_general_category_t = hb_unicode_general_category_t::NonSpacingMark;
pub const HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER: hb_unicode_general_category_t = hb_unicode_general_category_t::DecimalNumber;
pub const HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER: hb_unicode_general_category_t = hb_unicode_general_category_t::LetterNumber;
pub const HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER: hb_unicode_general_category_t = hb_unicode_general_category_t::OtherNumber;
pub const HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION: hb_unicode_general_category_t = hb_unicode_general_category_t::ConnectPunctuation;
pub const HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION: hb_unicode_general_category_t = hb_unicode_general_category_t::DashPunctuation;
pub const HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION: hb_unicode_general_category_t = hb_unicode_general_category_t::ClosePunctuation;
pub const HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION: hb_unicode_general_category_t = hb_unicode_general_category_t::FinalPunctuation;
pub const HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION: hb_unicode_general_category_t = hb_unicode_general_category_t::InitialPunctuation;
pub const HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION: hb_unicode_general_category_t = hb_unicode_general_category_t::OtherPunctuation;
pub const HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION: hb_unicode_general_category_t = hb_unicode_general_category_t::OpenPunctuation;
pub const HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL: hb_unicode_general_category_t = hb_unicode_general_category_t::CurrencySymbol;
pub const HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL: hb_unicode_general_category_t = hb_unicode_general_category_t::ModifierSymbol;
pub const HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL: hb_unicode_general_category_t = hb_unicode_general_category_t::MathSymbol;
pub const HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL: hb_unicode_general_category_t = hb_unicode_general_category_t::OtherSymbol;
pub const HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR: hb_unicode_general_category_t = hb_unicode_general_category_t::LineSeparator;
pub const HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR: hb_unicode_general_category_t = hb_unicode_general_category_t::ParagraphSeparator;
pub const HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR: hb_unicode_general_category_t = hb_unicode_general_category_t::SpaceSeparator;

// Constants
pub const HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT: c_int = 65533;
pub const HB_OT_LAYOUT_DEFAULT_LANGUAGE_INDEX: c_int = 65535;
pub const HB_OT_LAYOUT_NO_FEATURE_INDEX: c_int = 65535;
pub const HB_OT_LAYOUT_NO_SCRIPT_INDEX: c_int = 65535;
pub const HB_OT_LAYOUT_NO_VARIATIONS_INDEX: u32 = 4294967295;
pub const HB_OT_VAR_NO_AXIS_INDEX: u32 = 4294967295;
pub const HB_SET_VALUE_INVALID: hb_codepoint_t = 4294967295;
pub const HB_UNICODE_MAX_DECOMPOSITION_LEN: c_int = 19;
pub const HB_VERSION_MAJOR: c_int = 1;
pub const HB_VERSION_MICRO: c_int = 6;
pub const HB_VERSION_MINOR: c_int = 4;
pub const HB_VERSION_STRING: *const c_char = b"1.4.6\0" as *const u8 as *const c_char;

// Flags
bitflags! {
    #[repr(C)]
    pub struct hb_buffer_flags_t: c_uint {
        const HB_BUFFER_FLAG_DEFAULT = 0;
        const HB_BUFFER_FLAG_BOT = 1;
        const HB_BUFFER_FLAG_EOT = 2;
        const HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 4;
    }
}

bitflags! {
    #[repr(C)]
    pub struct hb_buffer_serialize_flags_t: c_uint {
        const HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0;
        const HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 1;
        const HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 2;
        const HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 4;
        const HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = 8;
    }
}

bitflags! {
    #[repr(C)]
    pub struct hb_ot_math_glyph_part_flags_t: c_uint {
        const HB_MATH_GLYPH_PART_FLAG_EXTENDER = 1;
    }
}

// Unions
pub type hb_var_int_t = u32; // union of size 32 bits

// Callbacks
pub type hb_buffer_message_func_t = Option<unsafe extern "C" fn(*mut hb_buffer_t, *mut hb_font_t, *const c_char, *mut c_void) -> hb_bool_t>;
pub type hb_destroy_func_t = Option<unsafe extern "C" fn(*mut c_void)>;
pub type hb_font_get_font_extents_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, *mut hb_font_extents_t, *mut c_void) -> hb_bool_t>;
pub type hb_font_get_glyph_advance_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, hb_codepoint_t, *mut c_void) -> hb_position_t>;
pub type hb_font_get_glyph_contour_point_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, hb_codepoint_t, c_uint, *mut hb_position_t, *mut hb_position_t, *mut c_void) -> hb_bool_t>;
pub type hb_font_get_glyph_extents_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, hb_codepoint_t, *mut hb_glyph_extents_t, *mut c_void) -> hb_bool_t>;
pub type hb_font_get_glyph_from_name_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, *const c_char, c_int, *mut hb_codepoint_t, *mut c_void) -> hb_bool_t>;
pub type hb_font_get_glyph_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, hb_codepoint_t, hb_codepoint_t, *mut hb_codepoint_t, *mut c_void) -> hb_bool_t>;
pub type hb_font_get_glyph_kerning_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, hb_codepoint_t, hb_codepoint_t, *mut c_void) -> hb_position_t>;
pub type hb_font_get_glyph_name_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, hb_codepoint_t, *mut c_char, c_uint, *mut c_void) -> hb_bool_t>;
pub type hb_font_get_glyph_origin_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, hb_codepoint_t, *mut hb_position_t, *mut hb_position_t, *mut c_void) -> hb_bool_t>;
pub type hb_font_get_nominal_glyph_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, hb_codepoint_t, *mut hb_codepoint_t, *mut c_void) -> hb_bool_t>;
pub type hb_font_get_variation_glyph_func_t = Option<unsafe extern "C" fn(*mut hb_font_t, *mut c_void, hb_codepoint_t, hb_codepoint_t, *mut hb_codepoint_t, *mut c_void) -> hb_bool_t>;
pub type hb_reference_table_func_t = Option<unsafe extern "C" fn(*mut hb_face_t, hb_tag_t, *mut c_void) -> *mut hb_blob_t>;
pub type hb_unicode_combining_class_func_t = Option<unsafe extern "C" fn(*mut hb_unicode_funcs_t, hb_codepoint_t, *mut c_void) -> hb_unicode_combining_class_t>;
pub type hb_unicode_compose_func_t = Option<unsafe extern "C" fn(*mut hb_unicode_funcs_t, hb_codepoint_t, hb_codepoint_t, *mut hb_codepoint_t, *mut c_void) -> hb_bool_t>;
pub type hb_unicode_decompose_compatibility_func_t = Option<unsafe extern "C" fn(*mut hb_unicode_funcs_t, hb_codepoint_t, *mut hb_codepoint_t, *mut c_void) -> c_uint>;
pub type hb_unicode_decompose_func_t = Option<unsafe extern "C" fn(*mut hb_unicode_funcs_t, hb_codepoint_t, *mut hb_codepoint_t, *mut hb_codepoint_t, *mut c_void) -> hb_bool_t>;
pub type hb_unicode_eastasian_width_func_t = Option<unsafe extern "C" fn(*mut hb_unicode_funcs_t, hb_codepoint_t, *mut c_void) -> c_uint>;
pub type hb_unicode_general_category_func_t = Option<unsafe extern "C" fn(*mut hb_unicode_funcs_t, hb_codepoint_t, *mut c_void) -> hb_unicode_general_category_t>;
pub type hb_unicode_mirroring_func_t = Option<unsafe extern "C" fn(*mut hb_unicode_funcs_t, hb_codepoint_t, *mut c_void) -> hb_codepoint_t>;
pub type hb_unicode_script_func_t = Option<unsafe extern "C" fn(*mut hb_unicode_funcs_t, hb_codepoint_t, *mut c_void) -> hb_script_t>;

// Records
#[repr(C)]
pub struct hb_blob_t(c_void);

#[repr(C)]
pub struct hb_buffer_t(c_void);

#[repr(C)]
pub struct hb_face_t(c_void);

#[repr(C)]
pub struct hb_feature_t {
    pub tag: hb_tag_t,
    pub value: u32,
    pub start: c_uint,
    pub end: c_uint,
}

#[repr(C)]
pub struct hb_font_extents_t {
    pub ascender: hb_position_t,
    pub descender: hb_position_t,
    pub line_gap: hb_position_t,
    pub reserved9: hb_position_t,
    pub reserved8: hb_position_t,
    pub reserved7: hb_position_t,
    pub reserved6: hb_position_t,
    pub reserved5: hb_position_t,
    pub reserved4: hb_position_t,
    pub reserved3: hb_position_t,
    pub reserved2: hb_position_t,
    pub reserved1: hb_position_t,
}

#[repr(C)]
pub struct hb_font_funcs_t(c_void);

#[repr(C)]
pub struct hb_font_t(c_void);

#[repr(C)]
pub struct hb_glyph_extents_t {
    pub x_bearing: hb_position_t,
    pub y_bearing: hb_position_t,
    pub width: hb_position_t,
    pub height: hb_position_t,
}

#[repr(C)]
pub struct hb_glyph_info_t {
    pub codepoint: hb_codepoint_t,
    pub mask: hb_mask_t,
    pub cluster: u32,

    /*< private >*/
    pub var1: hb_var_int_t,
    pub var2: hb_var_int_t,
}

#[repr(C)]
pub struct hb_glyph_position_t {
    pub x_advance: hb_position_t,
    pub y_advance: hb_position_t,
    pub x_offset: hb_position_t,
    pub y_offset: hb_position_t,

    /*< private >*/
    pub var: hb_var_int_t,
}

#[repr(C)]
pub struct hb_language_t(c_void);

#[repr(C)]
pub struct hb_ot_math_glyph_part_t {
    pub glyph: hb_codepoint_t,
    pub start_connector_length: hb_position_t,
    pub end_connector_length: hb_position_t,
    pub full_advance: hb_position_t,
    pub flags: hb_ot_math_glyph_part_flags_t,
}

#[repr(C)]
pub struct hb_ot_math_glyph_variant_t {
    pub glyph: hb_codepoint_t,
    pub advance: hb_position_t,
}

#[repr(C)]
pub struct hb_ot_var_axis_t {
    pub tag: hb_tag_t,
    pub name_id: c_uint,
    pub min_value: c_float,
    pub default_value: c_float,
    pub max_value: c_float,
}

#[repr(C)]
pub struct hb_segment_properties_t {
    pub direction: hb_direction_t,
    pub script: hb_script_t,
    pub language: hb_language_t,
    pub reserved1: *mut c_void,
    pub reserved2: *mut c_void,
}

#[repr(C)]
pub struct hb_set_t(c_void);

#[repr(C)]
pub struct hb_shape_plan_t(c_void);

#[repr(C)]
pub struct hb_unicode_funcs_t(c_void);

#[repr(C)]
pub struct hb_user_data_key_t {
    pub unused: c_char,
}

#[repr(C)]
pub struct hb_variation_t {
    pub tag: hb_tag_t,
    pub value: c_float,
}

extern "C" {

    //=========================================================================
    // hb_blob_t
    //=========================================================================
    pub fn hb_gobject_blob_get_type() -> GType;

    //=========================================================================
    // hb_buffer_t
    //=========================================================================
    pub fn hb_gobject_buffer_get_type() -> GType;

    //=========================================================================
    // hb_face_t
    //=========================================================================
    pub fn hb_gobject_face_get_type() -> GType;

    //=========================================================================
    // hb_feature_t
    //=========================================================================
    pub fn hb_gobject_feature_get_type() -> GType;

    //=========================================================================
    // hb_font_funcs_t
    //=========================================================================
    pub fn hb_gobject_font_funcs_get_type() -> GType;

    //=========================================================================
    // hb_font_t
    //=========================================================================
    pub fn hb_gobject_font_get_type() -> GType;

    //=========================================================================
    // hb_glyph_info_t
    //=========================================================================
    pub fn hb_gobject_glyph_info_get_type() -> GType;

    //=========================================================================
    // hb_glyph_position_t
    //=========================================================================
    pub fn hb_gobject_glyph_position_get_type() -> GType;

    //=========================================================================
    // hb_segment_properties_t
    //=========================================================================
    pub fn hb_gobject_segment_properties_get_type() -> GType;

    //=========================================================================
    // hb_set_t
    //=========================================================================
    pub fn hb_gobject_set_get_type() -> GType;

    //=========================================================================
    // hb_shape_plan_t
    //=========================================================================
    pub fn hb_gobject_shape_plan_get_type() -> GType;

    //=========================================================================
    // hb_unicode_funcs_t
    //=========================================================================
    pub fn hb_gobject_unicode_funcs_get_type() -> GType;

    //=========================================================================
    // hb_user_data_key_t
    //=========================================================================
    pub fn hb_gobject_user_data_key_get_type() -> GType;

    //=========================================================================
    // Other functions
    //=========================================================================
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_create(data: *const c_char, length: c_uint, mode: hb_memory_mode_t, user_data: *mut c_void, destroy: hb_destroy_func_t) -> *mut hb_blob_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_create_sub_blob(parent: *mut hb_blob_t, offset: c_uint, length: c_uint) -> *mut hb_blob_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_destroy(blob: *mut hb_blob_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_get_data(blob: *mut hb_blob_t, length: *mut c_uint) -> *mut c_char;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_get_data_writable(blob: *mut hb_blob_t, length: *mut c_uint) -> *mut c_char;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_get_empty() -> *mut hb_blob_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_get_length(blob: *mut hb_blob_t) -> c_uint;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_get_user_data(blob: *mut hb_blob_t, key: *mut hb_user_data_key_t) -> *mut c_void;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_is_immutable(blob: *mut hb_blob_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_make_immutable(blob: *mut hb_blob_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_reference(blob: *mut hb_blob_t) -> *mut hb_blob_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_blob_set_user_data(blob: *mut hb_blob_t, key: *mut hb_user_data_key_t, data: *mut c_void, destroy: hb_destroy_func_t, replace: hb_bool_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_add(buffer: *mut hb_buffer_t, codepoint: hb_codepoint_t, cluster: c_uint);
    #[cfg(feature = "v0_9_31")]
    pub fn hb_buffer_add_codepoints(buffer: *mut hb_buffer_t, text: *mut hb_codepoint_t, text_length: c_int, item_offset: c_uint, item_length: c_int);
    #[cfg(feature = "v0_9_39")]
    pub fn hb_buffer_add_latin1(buffer: *mut hb_buffer_t, text: *mut u8, text_length: c_int, item_offset: c_uint, item_length: c_int);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_add_utf16(buffer: *mut hb_buffer_t, text: *mut u16, text_length: c_int, item_offset: c_uint, item_length: c_int);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_add_utf32(buffer: *mut hb_buffer_t, text: *mut u32, text_length: c_int, item_offset: c_uint, item_length: c_int);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_add_utf8(buffer: *mut hb_buffer_t, text: *mut u8, text_length: c_int, item_offset: c_uint, item_length: c_int);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_allocation_successful(buffer: *mut hb_buffer_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_11")]
    pub fn hb_buffer_clear_contents(buffer: *mut hb_buffer_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_create() -> *mut hb_buffer_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_deserialize_glyphs(buffer: *mut hb_buffer_t, buf: *mut c_char, buf_len: c_int, end_ptr: *mut *const c_char, font: *mut hb_font_t, format: hb_buffer_serialize_format_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_destroy(buffer: *mut hb_buffer_t);
    #[cfg(feature = "v0_9_42")]
    pub fn hb_buffer_get_cluster_level(buffer: *mut hb_buffer_t) -> hb_buffer_cluster_level_t;
    #[cfg(feature = "v0_9_5")]
    pub fn hb_buffer_get_content_type(buffer: *mut hb_buffer_t) -> hb_buffer_content_type_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_get_direction(buffer: *mut hb_buffer_t) -> hb_direction_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_get_empty() -> *mut hb_buffer_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_get_flags(buffer: *mut hb_buffer_t) -> hb_buffer_flags_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_get_glyph_infos(buffer: *mut hb_buffer_t, length: *mut c_uint) -> *mut hb_glyph_info_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_get_glyph_positions(buffer: *mut hb_buffer_t, length: *mut c_uint) -> *mut hb_glyph_position_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_get_language(buffer: *mut hb_buffer_t) -> hb_language_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_get_length(buffer: *mut hb_buffer_t) -> c_uint;
    #[cfg(feature = "v0_9_31")]
    pub fn hb_buffer_get_replacement_codepoint(buffer: *mut hb_buffer_t) -> hb_codepoint_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_get_script(buffer: *mut hb_buffer_t) -> hb_script_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_get_segment_properties(buffer: *mut hb_buffer_t, props: *mut hb_segment_properties_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_get_unicode_funcs(buffer: *mut hb_buffer_t) -> *mut hb_unicode_funcs_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_get_user_data(buffer: *mut hb_buffer_t, key: *mut hb_user_data_key_t) -> *mut c_void;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_guess_segment_properties(buffer: *mut hb_buffer_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_normalize_glyphs(buffer: *mut hb_buffer_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_pre_allocate(buffer: *mut hb_buffer_t, size: c_uint) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_reference(buffer: *mut hb_buffer_t) -> *mut hb_buffer_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_reset(buffer: *mut hb_buffer_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_reverse(buffer: *mut hb_buffer_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_reverse_clusters(buffer: *mut hb_buffer_t);
    #[cfg(feature = "v0_9_41")]
    pub fn hb_buffer_reverse_range(buffer: *mut hb_buffer_t, start: c_uint, end: c_uint);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_serialize_format_from_string(str: *mut u8, len: c_int) -> hb_buffer_serialize_format_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_serialize_format_to_string(format: hb_buffer_serialize_format_t) -> *const c_char;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_serialize_glyphs(buffer: *mut hb_buffer_t, start: c_uint, end: c_uint, buf: *mut u8, buf_size: c_uint, buf_consumed: *mut c_uint, font: *mut hb_font_t, format: hb_buffer_serialize_format_t, flags: hb_buffer_serialize_flags_t) -> c_uint;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_serialize_list_formats() -> *mut *const c_char;
    #[cfg(feature = "v0_9_42")]
    pub fn hb_buffer_set_cluster_level(buffer: *mut hb_buffer_t, cluster_level: hb_buffer_cluster_level_t);
    #[cfg(feature = "v0_9_5")]
    pub fn hb_buffer_set_content_type(buffer: *mut hb_buffer_t, content_type: hb_buffer_content_type_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_set_direction(buffer: *mut hb_buffer_t, direction: hb_direction_t);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_set_flags(buffer: *mut hb_buffer_t, flags: hb_buffer_flags_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_set_language(buffer: *mut hb_buffer_t, language: hb_language_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_set_length(buffer: *mut hb_buffer_t, length: c_uint) -> hb_bool_t;
    #[cfg(feature = "v1_1_3")]
    pub fn hb_buffer_set_message_func(buffer: *mut hb_buffer_t, func: hb_buffer_message_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_31")]
    pub fn hb_buffer_set_replacement_codepoint(buffer: *mut hb_buffer_t, replacement: hb_codepoint_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_set_script(buffer: *mut hb_buffer_t, script: hb_script_t);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_buffer_set_segment_properties(buffer: *mut hb_buffer_t, props: *const hb_segment_properties_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_set_unicode_funcs(buffer: *mut hb_buffer_t, unicode_funcs: *mut hb_unicode_funcs_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_buffer_set_user_data(buffer: *mut hb_buffer_t, key: *mut hb_user_data_key_t, data: *mut c_void, destroy: hb_destroy_func_t, replace: hb_bool_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_direction_from_string(str: *mut u8, len: c_int) -> hb_direction_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_direction_to_string(direction: hb_direction_t) -> *const c_char;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_create(blob: *mut hb_blob_t, index: c_uint) -> *mut hb_face_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_create_for_tables(reference_table_func: hb_reference_table_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t) -> *mut hb_face_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_destroy(face: *mut hb_face_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_get_empty() -> *mut hb_face_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_face_get_glyph_count(face: *mut hb_face_t) -> c_uint;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_get_index(face: *mut hb_face_t) -> c_uint;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_get_upem(face: *mut hb_face_t) -> c_uint;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_get_user_data(face: *mut hb_face_t, key: *mut hb_user_data_key_t) -> *mut c_void;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_is_immutable(face: *mut hb_face_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_make_immutable(face: *mut hb_face_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_reference(face: *mut hb_face_t) -> *mut hb_face_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_reference_blob(face: *mut hb_face_t) -> *mut hb_blob_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_reference_table(face: *mut hb_face_t, tag: hb_tag_t) -> *mut hb_blob_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_face_set_glyph_count(face: *mut hb_face_t, glyph_count: c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_set_index(face: *mut hb_face_t, index: c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_set_upem(face: *mut hb_face_t, upem: c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_face_set_user_data(face: *mut hb_face_t, key: *mut hb_user_data_key_t, data: *mut c_void, destroy: hb_destroy_func_t, replace: hb_bool_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_5")]
    pub fn hb_feature_from_string(str: *mut u8, len: c_int, feature: *mut hb_feature_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_5")]
    pub fn hb_feature_to_string(feature: *mut hb_feature_t, buf: *mut c_char, size: c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_add_glyph_origin_for_direction(font: *mut hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, x: *mut hb_position_t, y: *mut hb_position_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_create(face: *mut hb_face_t) -> *mut hb_font_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_create_sub_font(parent: *mut hb_font_t) -> *mut hb_font_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_destroy(font: *mut hb_font_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_create() -> *mut hb_font_funcs_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_destroy(ffuncs: *mut hb_font_funcs_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_get_empty() -> *mut hb_font_funcs_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_get_user_data(ffuncs: *mut hb_font_funcs_t, key: *mut hb_user_data_key_t) -> *mut c_void;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_is_immutable(ffuncs: *mut hb_font_funcs_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_make_immutable(ffuncs: *mut hb_font_funcs_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_reference(ffuncs: *mut hb_font_funcs_t) -> *mut hb_font_funcs_t;
    #[cfg(feature = "v1_1_2")]
    pub fn hb_font_funcs_set_font_h_extents_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_font_h_extents_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v1_1_2")]
    pub fn hb_font_funcs_set_font_v_extents_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_font_v_extents_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_contour_point_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_contour_point_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_extents_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_extents_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_from_name_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_from_name_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_h_advance_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_h_advance_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_h_kerning_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_h_kerning_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_h_origin_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_h_origin_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_name_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_name_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_v_advance_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_v_advance_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_v_kerning_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_v_kerning_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_glyph_v_origin_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_glyph_v_origin_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v1_2_3")]
    pub fn hb_font_funcs_set_nominal_glyph_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_nominal_glyph_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_funcs_set_user_data(ffuncs: *mut hb_font_funcs_t, key: *mut hb_user_data_key_t, data: *mut c_void, destroy: hb_destroy_func_t, replace: hb_bool_t) -> hb_bool_t;
    #[cfg(feature = "v1_2_3")]
    pub fn hb_font_funcs_set_variation_glyph_func(ffuncs: *mut hb_font_funcs_t, func: hb_font_get_variation_glyph_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_empty() -> *mut hb_font_t;
    #[cfg(feature = "v1_1_3")]
    pub fn hb_font_get_extents_for_direction(font: *mut hb_font_t, direction: hb_direction_t, extents: *mut hb_font_extents_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_face(font: *mut hb_font_t) -> *mut hb_face_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph(font: *mut hb_font_t, unicode: hb_codepoint_t, variation_selector: hb_codepoint_t, glyph: *mut hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_advance_for_direction(font: *mut hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, x: *mut hb_position_t, y: *mut hb_position_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_contour_point(font: *mut hb_font_t, glyph: hb_codepoint_t, point_index: c_uint, x: *mut hb_position_t, y: *mut hb_position_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_contour_point_for_origin(font: *mut hb_font_t, glyph: hb_codepoint_t, point_index: c_uint, direction: hb_direction_t, x: *mut hb_position_t, y: *mut hb_position_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_extents(font: *mut hb_font_t, glyph: hb_codepoint_t, extents: *mut hb_glyph_extents_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_extents_for_origin(font: *mut hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, extents: *mut hb_glyph_extents_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_from_name(font: *mut hb_font_t, name: *mut c_char, len: c_int, glyph: *mut hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_h_advance(font: *mut hb_font_t, glyph: hb_codepoint_t) -> hb_position_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_h_kerning(font: *mut hb_font_t, left_glyph: hb_codepoint_t, right_glyph: hb_codepoint_t) -> hb_position_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_h_origin(font: *mut hb_font_t, glyph: hb_codepoint_t, x: *mut hb_position_t, y: *mut hb_position_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_kerning_for_direction(font: *mut hb_font_t, first_glyph: hb_codepoint_t, second_glyph: hb_codepoint_t, direction: hb_direction_t, x: *mut hb_position_t, y: *mut hb_position_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_name(font: *mut hb_font_t, glyph: hb_codepoint_t, name: *mut c_char, size: c_uint) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_origin_for_direction(font: *mut hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, x: *mut hb_position_t, y: *mut hb_position_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_v_advance(font: *mut hb_font_t, glyph: hb_codepoint_t) -> hb_position_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_v_kerning(font: *mut hb_font_t, top_glyph: hb_codepoint_t, bottom_glyph: hb_codepoint_t) -> hb_position_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_glyph_v_origin(font: *mut hb_font_t, glyph: hb_codepoint_t, x: *mut hb_position_t, y: *mut hb_position_t) -> hb_bool_t;
    #[cfg(feature = "v1_1_3")]
    pub fn hb_font_get_h_extents(font: *mut hb_font_t, extents: *mut hb_font_extents_t) -> hb_bool_t;
    #[cfg(feature = "v1_2_3")]
    pub fn hb_font_get_nominal_glyph(font: *mut hb_font_t, unicode: hb_codepoint_t, glyph: *mut hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_parent(font: *mut hb_font_t) -> *mut hb_font_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_ppem(font: *mut hb_font_t, x_ppem: *mut c_uint, y_ppem: *mut c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_scale(font: *mut hb_font_t, x_scale: *mut c_int, y_scale: *mut c_int);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_get_user_data(font: *mut hb_font_t, key: *mut hb_user_data_key_t) -> *mut c_void;
    #[cfg(feature = "v1_1_3")]
    pub fn hb_font_get_v_extents(font: *mut hb_font_t, extents: *mut hb_font_extents_t) -> hb_bool_t;
    #[cfg(feature = "v1_4_2")]
    pub fn hb_font_get_var_coords_normalized(font: *mut hb_font_t, length: *mut c_uint) -> *const c_int;
    #[cfg(feature = "v1_2_3")]
    pub fn hb_font_get_variation_glyph(font: *mut hb_font_t, unicode: hb_codepoint_t, variation_selector: hb_codepoint_t, glyph: *mut hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_glyph_from_string(font: *mut hb_font_t, s: *mut u8, len: c_int, glyph: *mut hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_glyph_to_string(font: *mut hb_font_t, glyph: hb_codepoint_t, s: *mut c_char, size: c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_is_immutable(font: *mut hb_font_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_make_immutable(font: *mut hb_font_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_reference(font: *mut hb_font_t) -> *mut hb_font_t;
    #[cfg(feature = "v1_4_3")]
    pub fn hb_font_set_face(font: *mut hb_font_t, face: *mut hb_face_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_set_funcs(font: *mut hb_font_t, klass: *mut hb_font_funcs_t, font_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_set_funcs_data(font: *mut hb_font_t, font_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v1_0_5")]
    pub fn hb_font_set_parent(font: *mut hb_font_t, parent: *mut hb_font_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_set_ppem(font: *mut hb_font_t, x_ppem: c_uint, y_ppem: c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_set_scale(font: *mut hb_font_t, x_scale: c_int, y_scale: c_int);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_set_user_data(font: *mut hb_font_t, key: *mut hb_user_data_key_t, data: *mut c_void, destroy: hb_destroy_func_t, replace: hb_bool_t) -> hb_bool_t;
    #[cfg(feature = "v1_4_2")]
    pub fn hb_font_set_var_coords_design(font: *mut hb_font_t, coords: *const c_float, coords_length: c_uint);
    #[cfg(feature = "v1_4_2")]
    pub fn hb_font_set_var_coords_normalized(font: *mut hb_font_t, coords: *const c_int, coords_length: c_uint);
    #[cfg(feature = "v1_4_2")]
    pub fn hb_font_set_variations(font: *mut hb_font_t, variations: *const hb_variation_t, variations_length: c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_font_subtract_glyph_origin_for_direction(font: *mut hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, x: *mut hb_position_t, y: *mut hb_position_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_ft_face_create(ft_face: freetype2::FT_Face, destroy: hb_destroy_func_t) -> *mut hb_face_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_ft_face_create_cached(ft_face: freetype2::FT_Face) -> *mut hb_face_t;
    #[cfg(feature = "v0_9_38")]
    pub fn hb_ft_face_create_referenced(ft_face: freetype2::FT_Face) -> *mut hb_face_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_ft_font_create(ft_face: freetype2::FT_Face, destroy: hb_destroy_func_t) -> *mut hb_font_t;
    #[cfg(feature = "v0_9_38")]
    pub fn hb_ft_font_create_referenced(ft_face: freetype2::FT_Face) -> *mut hb_font_t;
    pub fn hb_ft_font_get_face(font: *mut hb_font_t) -> freetype2::FT_Face;
    #[cfg(feature = "v1_0_5")]
    pub fn hb_ft_font_get_load_flags(font: *mut hb_font_t) -> c_int;
    pub fn hb_ft_font_set_funcs(font: *mut hb_font_t);
    #[cfg(feature = "v1_0_5")]
    pub fn hb_ft_font_set_load_flags(font: *mut hb_font_t, load_flags: c_int);
    #[cfg(feature = "v0_9_38")]
    pub fn hb_glib_blob_create(gbytes: *mut glib::GBytes) -> *mut hb_blob_t;
    pub fn hb_glib_get_unicode_funcs() -> *mut hb_unicode_funcs_t;
    pub fn hb_glib_script_from_script(script: hb_script_t) -> glib::GUnicodeScript;
    pub fn hb_glib_script_to_script(script: glib::GUnicodeScript) -> hb_script_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_language_from_string(str: *mut u8, len: c_int) -> hb_language_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_language_get_default() -> hb_language_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_language_to_string(language: hb_language_t) -> *const c_char;
    #[cfg(feature = "v0_9_28")]
    pub fn hb_ot_font_set_funcs(font: *mut hb_font_t);
    #[cfg(feature = "v0_9_8")]
    pub fn hb_ot_layout_collect_lookups(face: *mut hb_face_t, table_tag: hb_tag_t, scripts: *const hb_tag_t, languages: *const hb_tag_t, features: *const hb_tag_t, lookup_indexes: *mut hb_set_t);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_ot_layout_feature_get_lookups(face: *mut hb_face_t, table_tag: hb_tag_t, feature_index: c_uint, start_offset: c_uint, lookup_count: *mut c_uint, lookup_indexes: *mut c_uint) -> c_uint;
    pub fn hb_ot_layout_feature_with_variations_get_lookups(face: *mut hb_face_t, table_tag: hb_tag_t, feature_index: c_uint, variations_index: c_uint, start_offset: c_uint, lookup_count: *mut c_uint, lookup_indexes: *mut c_uint) -> c_uint;
    pub fn hb_ot_layout_get_attach_points(face: *mut hb_face_t, glyph: hb_codepoint_t, start_offset: c_uint, point_count: *mut c_uint, point_array: *mut c_uint) -> c_uint;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_ot_layout_get_glyph_class(face: *mut hb_face_t, glyph: hb_codepoint_t) -> hb_ot_layout_glyph_class_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_ot_layout_get_glyphs_in_class(face: *mut hb_face_t, klass: hb_ot_layout_glyph_class_t, glyphs: *mut hb_set_t);
    pub fn hb_ot_layout_get_ligature_carets(font: *mut hb_font_t, direction: hb_direction_t, glyph: hb_codepoint_t, start_offset: c_uint, caret_count: *mut c_uint, caret_array: *mut hb_position_t) -> c_uint;
    #[cfg(feature = "v0_9_10")]
    pub fn hb_ot_layout_get_size_params(face: *mut hb_face_t, design_size: *mut c_uint, subfamily_id: *mut c_uint, subfamily_name_id: *mut c_uint, range_start: *mut c_uint, range_end: *mut c_uint) -> hb_bool_t;
    pub fn hb_ot_layout_has_glyph_classes(face: *mut hb_face_t) -> hb_bool_t;
    pub fn hb_ot_layout_has_positioning(face: *mut hb_face_t) -> hb_bool_t;
    pub fn hb_ot_layout_has_substitution(face: *mut hb_face_t) -> hb_bool_t;
    pub fn hb_ot_layout_language_find_feature(face: *mut hb_face_t, table_tag: hb_tag_t, script_index: c_uint, language_index: c_uint, feature_tag: hb_tag_t, feature_index: *mut c_uint) -> hb_bool_t;
    pub fn hb_ot_layout_language_get_feature_indexes(face: *mut hb_face_t, table_tag: hb_tag_t, script_index: c_uint, language_index: c_uint, start_offset: c_uint, feature_count: *mut c_uint, feature_indexes: *mut c_uint) -> c_uint;
    pub fn hb_ot_layout_language_get_feature_tags(face: *mut hb_face_t, table_tag: hb_tag_t, script_index: c_uint, language_index: c_uint, start_offset: c_uint, feature_count: *mut c_uint, feature_tags: *mut hb_tag_t) -> c_uint;
    #[cfg(feature = "v0_9_30")]
    pub fn hb_ot_layout_language_get_required_feature(face: *mut hb_face_t, table_tag: hb_tag_t, script_index: c_uint, language_index: c_uint, feature_index: *mut c_uint, feature_tag: *mut hb_tag_t) -> hb_bool_t;
    pub fn hb_ot_layout_language_get_required_feature_index(face: *mut hb_face_t, table_tag: hb_tag_t, script_index: c_uint, language_index: c_uint, feature_index: *mut c_uint) -> hb_bool_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_ot_layout_lookup_collect_glyphs(face: *mut hb_face_t, table_tag: hb_tag_t, lookup_index: c_uint, glyphs_before: *mut hb_set_t, glyphs_input: *mut hb_set_t, glyphs_after: *mut hb_set_t, glyphs_output: *mut hb_set_t);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_ot_layout_lookup_substitute_closure(face: *mut hb_face_t, lookup_index: c_uint, glyphs: *mut hb_set_t);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_ot_layout_lookup_would_substitute(face: *mut hb_face_t, lookup_index: c_uint, glyphs: *const hb_codepoint_t, glyphs_length: c_uint, zero_context: hb_bool_t) -> hb_bool_t;
    pub fn hb_ot_layout_script_find_language(face: *mut hb_face_t, table_tag: hb_tag_t, script_index: c_uint, language_tag: hb_tag_t, language_index: *mut c_uint) -> hb_bool_t;
    pub fn hb_ot_layout_script_get_language_tags(face: *mut hb_face_t, table_tag: hb_tag_t, script_index: c_uint, start_offset: c_uint, language_count: *mut c_uint, language_tags: *mut hb_tag_t) -> c_uint;
    pub fn hb_ot_layout_table_choose_script(face: *mut hb_face_t, table_tag: hb_tag_t, script_tags: *const hb_tag_t, script_index: *mut c_uint, chosen_script: *mut hb_tag_t) -> hb_bool_t;
    pub fn hb_ot_layout_table_find_feature_variations(face: *mut hb_face_t, table_tag: hb_tag_t, coords: *const c_int, num_coords: c_uint, variations_index: *mut c_uint) -> hb_bool_t;
    pub fn hb_ot_layout_table_find_script(face: *mut hb_face_t, table_tag: hb_tag_t, script_tag: hb_tag_t, script_index: *mut c_uint) -> hb_bool_t;
    pub fn hb_ot_layout_table_get_feature_tags(face: *mut hb_face_t, table_tag: hb_tag_t, start_offset: c_uint, feature_count: *mut c_uint, feature_tags: *mut hb_tag_t) -> c_uint;
    #[cfg(feature = "v0_9_22")]
    pub fn hb_ot_layout_table_get_lookup_count(face: *mut hb_face_t, table_tag: hb_tag_t) -> c_uint;
    pub fn hb_ot_layout_table_get_script_tags(face: *mut hb_face_t, table_tag: hb_tag_t, start_offset: c_uint, script_count: *mut c_uint, script_tags: *mut hb_tag_t) -> c_uint;
    #[cfg(feature = "v1_3_3")]
    pub fn hb_ot_math_get_constant(font: *mut hb_font_t, constant: hb_ot_math_constant_t) -> hb_position_t;
    #[cfg(feature = "v1_3_3")]
    pub fn hb_ot_math_get_glyph_assembly(font: *mut hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, start_offset: c_uint, parts_count: *mut c_uint, parts: *mut hb_ot_math_glyph_part_t, italics_correction: *mut hb_position_t) -> c_uint;
    #[cfg(feature = "v1_3_3")]
    pub fn hb_ot_math_get_glyph_italics_correction(font: *mut hb_font_t, glyph: hb_codepoint_t) -> hb_position_t;
    #[cfg(feature = "v1_3_3")]
    pub fn hb_ot_math_get_glyph_kerning(font: *mut hb_font_t, glyph: hb_codepoint_t, kern: hb_ot_math_kern_t, correction_height: hb_position_t) -> hb_position_t;
    #[cfg(feature = "v1_3_3")]
    pub fn hb_ot_math_get_glyph_top_accent_attachment(font: *mut hb_font_t, glyph: hb_codepoint_t) -> hb_position_t;
    #[cfg(feature = "v1_3_3")]
    pub fn hb_ot_math_get_glyph_variants(font: *mut hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, start_offset: c_uint, variants_count: *mut c_uint, variants: *mut hb_ot_math_glyph_variant_t) -> c_uint;
    #[cfg(feature = "v1_3_3")]
    pub fn hb_ot_math_get_min_connector_overlap(font: *mut hb_font_t, direction: hb_direction_t) -> hb_position_t;
    #[cfg(feature = "v1_3_3")]
    pub fn hb_ot_math_has_data(face: *mut hb_face_t) -> hb_bool_t;
    #[cfg(feature = "v1_3_3")]
    pub fn hb_ot_math_is_glyph_extended_shape(face: *mut hb_face_t, glyph: hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_ot_shape_glyphs_closure(font: *mut hb_font_t, buffer: *mut hb_buffer_t, features: *const hb_feature_t, num_features: c_uint, glyphs: *mut hb_set_t);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_ot_shape_plan_collect_lookups(shape_plan: *mut hb_shape_plan_t, table_tag: hb_tag_t, lookup_indexes: *mut hb_set_t);
    pub fn hb_ot_tag_from_language(language: hb_language_t) -> hb_tag_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_ot_tag_to_language(tag: hb_tag_t) -> hb_language_t;
    pub fn hb_ot_tag_to_script(tag: hb_tag_t) -> hb_script_t;
    pub fn hb_ot_tags_from_script(script: hb_script_t, script_tag_1: *mut hb_tag_t, script_tag_2: *mut hb_tag_t);
    #[cfg(feature = "v1_4_2")]
    pub fn hb_ot_var_find_axis(face: *mut hb_face_t, axis_tag: hb_tag_t, axis_index: *mut c_uint, axis_info: *mut hb_ot_var_axis_t) -> hb_bool_t;
    #[cfg(feature = "v1_4_2")]
    pub fn hb_ot_var_get_axes(face: *mut hb_face_t, start_offset: c_uint, axes_count: *mut c_uint, axes_array: *mut hb_ot_var_axis_t) -> c_uint;
    #[cfg(feature = "v1_4_2")]
    pub fn hb_ot_var_get_axis_count(face: *mut hb_face_t) -> c_uint;
    #[cfg(feature = "v1_4_2")]
    pub fn hb_ot_var_has_data(face: *mut hb_face_t) -> hb_bool_t;
    #[cfg(feature = "v1_4_2")]
    pub fn hb_ot_var_normalize_coords(face: *mut hb_face_t, coords_length: c_uint, design_coords: *const c_float, normalized_coords: *mut c_int);
    #[cfg(feature = "v1_4_2")]
    pub fn hb_ot_var_normalize_variations(face: *mut hb_face_t, variations: *const hb_variation_t, variations_length: c_uint, coords: *mut c_int, coords_length: c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_script_from_iso15924_tag(tag: hb_tag_t) -> hb_script_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_script_from_string(str: *mut u8, len: c_int) -> hb_script_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_script_get_horizontal_direction(script: hb_script_t) -> hb_direction_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_script_to_iso15924_tag(script: hb_script_t) -> hb_tag_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_segment_properties_equal(a: *const hb_segment_properties_t, b: *const hb_segment_properties_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_segment_properties_hash(p: *const hb_segment_properties_t) -> c_uint;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_add(set: *mut hb_set_t, codepoint: hb_codepoint_t);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_set_add_range(set: *mut hb_set_t, first: hb_codepoint_t, last: hb_codepoint_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_allocation_successful(set: *const hb_set_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_clear(set: *mut hb_set_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_create() -> *mut hb_set_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_del(set: *mut hb_set_t, codepoint: hb_codepoint_t);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_set_del_range(set: *mut hb_set_t, first: hb_codepoint_t, last: hb_codepoint_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_destroy(set: *mut hb_set_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_get_empty() -> *mut hb_set_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_set_get_max(set: *const hb_set_t) -> hb_codepoint_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_set_get_min(set: *const hb_set_t) -> hb_codepoint_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_set_get_population(set: *const hb_set_t) -> c_uint;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_get_user_data(set: *mut hb_set_t, key: *mut hb_user_data_key_t) -> *mut c_void;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_has(set: *const hb_set_t, codepoint: hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_intersect(set: *mut hb_set_t, other: *const hb_set_t);
    #[cfg(feature = "v0_9_10")]
    pub fn hb_set_invert(set: *mut hb_set_t);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_set_is_empty(set: *const hb_set_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_set_is_equal(set: *const hb_set_t, other: *const hb_set_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_next(set: *const hb_set_t, codepoint: *mut hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_set_next_range(set: *const hb_set_t, first: *mut hb_codepoint_t, last: *mut hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_reference(set: *mut hb_set_t) -> *mut hb_set_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_set(set: *mut hb_set_t, other: *const hb_set_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_set_user_data(set: *mut hb_set_t, key: *mut hb_user_data_key_t, data: *mut c_void, destroy: hb_destroy_func_t, replace: hb_bool_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_subtract(set: *mut hb_set_t, other: *const hb_set_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_symmetric_difference(set: *mut hb_set_t, other: *const hb_set_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_set_union(set: *mut hb_set_t, other: *const hb_set_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_shape(font: *mut hb_font_t, buffer: *mut hb_buffer_t, features: *mut hb_feature_t, num_features: c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_shape_full(font: *mut hb_font_t, buffer: *mut hb_buffer_t, features: *mut hb_feature_t, num_features: c_uint, shaper_list: *mut *mut c_char) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_shape_list_shapers() -> *mut *mut c_char;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_shape_plan_create(face: *mut hb_face_t, props: *const hb_segment_properties_t, user_features: *mut hb_feature_t, num_user_features: c_uint, shaper_list: *mut *mut c_char) -> *mut hb_shape_plan_t;
    pub fn hb_shape_plan_create2(face: *mut hb_face_t, props: *const hb_segment_properties_t, user_features: *const hb_feature_t, num_user_features: c_uint, coords: *const c_int, num_coords: c_uint, shaper_list: *const *const c_char) -> *mut hb_shape_plan_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_shape_plan_create_cached(face: *mut hb_face_t, props: *const hb_segment_properties_t, user_features: *mut hb_feature_t, num_user_features: c_uint, shaper_list: *mut *mut c_char) -> *mut hb_shape_plan_t;
    pub fn hb_shape_plan_create_cached2(face: *mut hb_face_t, props: *const hb_segment_properties_t, user_features: *const hb_feature_t, num_user_features: c_uint, coords: *const c_int, num_coords: c_uint, shaper_list: *const *const c_char) -> *mut hb_shape_plan_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_shape_plan_destroy(shape_plan: *mut hb_shape_plan_t);
    #[cfg(feature = "v0_9_7")]
    pub fn hb_shape_plan_execute(shape_plan: *mut hb_shape_plan_t, font: *mut hb_font_t, buffer: *mut hb_buffer_t, features: *mut hb_feature_t, num_features: c_uint) -> hb_bool_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_shape_plan_get_empty() -> *mut hb_shape_plan_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_shape_plan_get_shaper(shape_plan: *mut hb_shape_plan_t) -> *const c_char;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_shape_plan_get_user_data(shape_plan: *mut hb_shape_plan_t, key: *mut hb_user_data_key_t) -> *mut c_void;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_shape_plan_reference(shape_plan: *mut hb_shape_plan_t) -> *mut hb_shape_plan_t;
    #[cfg(feature = "v0_9_7")]
    pub fn hb_shape_plan_set_user_data(shape_plan: *mut hb_shape_plan_t, key: *mut hb_user_data_key_t, data: *mut c_void, destroy: hb_destroy_func_t, replace: hb_bool_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_tag_from_string(str: *mut u8, len: c_int) -> hb_tag_t;
    #[cfg(feature = "v0_9_5")]
    pub fn hb_tag_to_string(tag: hb_tag_t, buf: *mut [u8; 4]);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_combining_class(ufuncs: *mut hb_unicode_funcs_t, unicode: hb_codepoint_t) -> hb_unicode_combining_class_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_compose(ufuncs: *mut hb_unicode_funcs_t, a: hb_codepoint_t, b: hb_codepoint_t, ab: *mut hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_decompose(ufuncs: *mut hb_unicode_funcs_t, ab: hb_codepoint_t, a: *mut hb_codepoint_t, b: *mut hb_codepoint_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_decompose_compatibility(ufuncs: *mut hb_unicode_funcs_t, u: hb_codepoint_t, decomposed: *mut hb_codepoint_t) -> c_uint;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_eastasian_width(ufuncs: *mut hb_unicode_funcs_t, unicode: hb_codepoint_t) -> c_uint;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_create(parent: *mut hb_unicode_funcs_t) -> *mut hb_unicode_funcs_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_destroy(ufuncs: *mut hb_unicode_funcs_t);
    pub fn hb_unicode_funcs_get_default() -> *mut hb_unicode_funcs_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_get_empty() -> *mut hb_unicode_funcs_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_get_parent(ufuncs: *mut hb_unicode_funcs_t) -> *mut hb_unicode_funcs_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_get_user_data(ufuncs: *mut hb_unicode_funcs_t, key: *mut hb_user_data_key_t) -> *mut c_void;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_is_immutable(ufuncs: *mut hb_unicode_funcs_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_make_immutable(ufuncs: *mut hb_unicode_funcs_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_reference(ufuncs: *mut hb_unicode_funcs_t) -> *mut hb_unicode_funcs_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_set_combining_class_func(ufuncs: *mut hb_unicode_funcs_t, func: hb_unicode_combining_class_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_set_compose_func(ufuncs: *mut hb_unicode_funcs_t, func: hb_unicode_compose_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_set_decompose_compatibility_func(ufuncs: *mut hb_unicode_funcs_t, func: hb_unicode_decompose_compatibility_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_set_decompose_func(ufuncs: *mut hb_unicode_funcs_t, func: hb_unicode_decompose_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_set_eastasian_width_func(ufuncs: *mut hb_unicode_funcs_t, func: hb_unicode_eastasian_width_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_set_general_category_func(ufuncs: *mut hb_unicode_funcs_t, func: hb_unicode_general_category_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_set_mirroring_func(ufuncs: *mut hb_unicode_funcs_t, func: hb_unicode_mirroring_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_set_script_func(ufuncs: *mut hb_unicode_funcs_t, func: hb_unicode_script_func_t, user_data: *mut c_void, destroy: hb_destroy_func_t);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_funcs_set_user_data(ufuncs: *mut hb_unicode_funcs_t, key: *mut hb_user_data_key_t, data: *mut c_void, destroy: hb_destroy_func_t, replace: hb_bool_t) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_general_category(ufuncs: *mut hb_unicode_funcs_t, unicode: hb_codepoint_t) -> hb_unicode_general_category_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_mirroring(ufuncs: *mut hb_unicode_funcs_t, unicode: hb_codepoint_t) -> hb_codepoint_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_unicode_script(ufuncs: *mut hb_unicode_funcs_t, unicode: hb_codepoint_t) -> hb_script_t;
    #[cfg(feature = "v1_4_2")]
    pub fn hb_variation_from_string(str: *const c_char, len: c_int, variation: *mut hb_variation_t) -> hb_bool_t;
    #[cfg(feature = "v1_4_2")]
    pub fn hb_variation_to_string(variation: *mut hb_variation_t, buf: *mut c_char, size: c_uint);
    #[cfg(feature = "v0_9_2")]
    pub fn hb_version(major: *mut c_uint, minor: *mut c_uint, micro: *mut c_uint);
    #[cfg(feature = "v0_9_30")]
    pub fn hb_version_atleast(major: c_uint, minor: c_uint, micro: c_uint) -> hb_bool_t;
    #[cfg(feature = "v0_9_2")]
    pub fn hb_version_string() -> *const c_char;

}
